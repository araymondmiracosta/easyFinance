This document holds function descriptions. Functions are sorted alphabetically and are grouped according to their class.

MainActivity:
	applicationNavHost(context: Context) {
		Holds the navHostController for the application. All navigation is done through this function and the navHostController is passed to all main screens to achieve this.

	private initialize()
		Reads in any saved ledger or preference data and creates the ArrayList<Account> Values.accounts, ArrayList<Transaction> Values.transactions, ArrayList<String> Values.categories lists.
	
Transaction:
	Transaction(category: String, description: String, amount: Double, utcDateTime: ZonedDateTime, accountName: String)
		Creates a new Transaction object with associated ZonedDateTime object for sorting purposes (always in UTC).
	
	editTransaction(category: String, description: String, amount: Double, utcDateTime: ZonedDateTime, account:String) {
		Assigns this transaction's data with the given data.

Utility:
	calculateTransactionRunningBalance(transaction: Transaction, transactionList: ArrayList<Transaction>): Double
		Calculates and returns the running balance (balance of the account if no other transactions occurred after this one) of the transactions on transactionList on a per account basis.
		This function is used in displaying the running balance on the transaction list display.

	changeAccountName(context: Context, oldAccountName: String, newAccountName: String): Boolean
		Changes the account name on all transactions with oldAccountName to newAccountName.
		Returns true if writeLedgerData succeeded.
	
	clearTransactions(context: Context)
		Deletes all transactions from Values.transactions

	convertLocalDateTimeToUTC(localDateTime: ZonedDateTime): ZonedDateTime
		Returns a 

	indexFromName(accountName: String): Int
		Returns the index in Values.accounts of where an account with the given name is.
		There can only be one account of a given name, so this function should only find one account with the given name.
	
	readAccounts()
		Populates Values.accountsNames with account names from Values.accounts

	readCategories()
		Populates Values.categories with categories taken from Values.transactions

	readCurrencySaveData(context: Context): Boolean
		Reads in a String object containing the user's currency preference from the respective save file

	readLedgerSaveData(context: Context): Boolean
		Reads in an ArrayList<Account> object containing the user's created accounts from the respective save file

	readTransactions()
		Populates Values.transactions from the transaction lists of Account objects containing in Values.accounts

	sortTransactionListByDate(list: ArrayList<Transaction>): ArrayList<Transaction>
		Sorts the given ArrayList<Transaction> object by newest date first (descending)

	writeCurrencyData(context: Context): Boolean
		Writes the user's currency preference (Values.currency) to the respective save file

	writeLedgerData(context: Context): Boolean
		Writes Values.accounts to the respective save file

	writeSaveData(data: Any, file: String, context: Context): Boolean
		Saves the given object into the given file name

Views:
	generateAccountCreationView(navHostController: NavHostController, context: Context)
		Draws the account creation screen.
